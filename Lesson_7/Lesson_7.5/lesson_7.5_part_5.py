"""
7.5 Функции с произвольным числом параметров

Подвиг 5. Объявите функцию с именем get_data_fig для вычисления периметра произвольного N-угольника.
На вход этой функции передаются N длин сторон через аргументы. Дополнительно могут быть указаны именованные аргументы:

type - булево значение True/False
color - целое числовое значение
closed - булево значение True/False
width - целое значение

Функция должна возвращать в виде кортежа периметр многоугольника и указанные значения именованных
параметров в порядке их перечисления в тексте задания (если они были переданы).
Если какой-либо параметр отсутствует, его возвращать не нужно (пропустить).

Функцию выполнять не нужно, только определить.
"""

def get_data_fig(*args, **kwargs):
    """
    Функция должна возвращать в виде кортежа периметр многоугольника и указанные значения именованных
    параметров
    :param args: стороны прямоугольника
    :param kwargs: именованные дополнительные параметры
    :return: возвращает периметр многоугольника и указанные значения именованных параметров
    """
    parm = ['type', 'color', 'closed', 'width'] # Список дополнительных параметров для сравнения
    list_val = list() # Список для именованных параметров действительно переданных в функцию
    for val in parm: # Перебираю возможные ключи в заданном порядке по умолчанию
        if val in kwargs.keys(): # Сравниваю ключи из списка с переданными
            list_val.append(kwargs.get(val)) # Сравниваю ключи из списка с переданными

    # result = sum(args), *kwargs.values()
    result = sum(args), *list_val # Сохраняю данные в кортеж соблюдая условия задания.
    return result

args = 10, 20, 40, 50
parm = {
    'type': 'True',
    'color': 255,
    'closed': 'False',
    'width': 70
}
print(get_data_fig(*args, **parm))
parm_2 = {
    'closed': 'False',
    'type': 'True',
    'width': 70,
    'color': 255
}
print(get_data_fig(*args, **parm_2))
