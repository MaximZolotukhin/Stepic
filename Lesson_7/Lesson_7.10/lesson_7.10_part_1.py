"""
7.10 Замыкания в Python. Вложенные функции

Подвиг 1. Используя замыкания функций, определите вложенную функцию, которая бы увеличивала
значение переданного параметра на 5 и возвращала бы вычисленный результат.
При этом внешняя функция должна иметь следующую сигнатуру:

def counter_add(): ...

Вызовите функцию counter_add и результат ее работы присвойте переменной с именем cnt.
Вызовите внутреннюю функцию через переменную cnt со значением k, введенным с клавиатуры:
k = int(input())
Выведите результат на экран.

Sample Input: 7
Sample Output: 12
"""
k = int(input())

def counter_add(param=0): # Внешняя функция принимает один параметр
    def sum_count(): # Внутренняя функция
        nonlocal param # С помощью ключевого слова nonlocal мы можем изменить переменную из внешней переменной
        param += 5 # Увеличиваем переменную на 5
        return param # Возвращаем получившийся результат
    return sum_count # С помощью вызова внутренней функции делаем замыкание.


f_1 = counter_add(k) # Делаем ссылку на функцию, если параметры передаются в внешную функцию то параметры передаем при
# создание ссылки. Если в внутренную функцию то мы передаем параметры при вызове фукнции через ссылку
f_2 = counter_add()
f_3 = counter_add()
print(f_1())
print(f_1())
print(f_1())
print(f_2())
print(f_2())
print(f_2())